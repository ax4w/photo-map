// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package frontend

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Index(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html><head><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `frontend/index.templ`, Line: 7, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css\"><style>\n            #map {\n                height: 100vh;\n                width: 100%;\n                background-color: #262626;\n            }\n\n            body {\n                background-color: #262626;\n            }\n\n            .image-gallery {\n                display: grid;\n                grid-template-columns: repeat(4, minmax(180px, 1fr));\n                gap: 5px;\n                max-height: 30vh;\n                overflow-y: auto;\n                padding: 10px;\n                box-sizing: border-box;\n            }\n\n            .thumbnail {\n                width: 100%;\n                height: 150px;\n                object-fit: cover;\n                cursor: pointer;\n                border-radius: 8px;\n                transition: transform 0.2s;\n            }\n\n            .thumbnail:hover {\n                transform: scale(1.05);\n            }\n\n            .leaflet-popup-content-wrapper {\n                max-width: 100% !important;\n                width: auto !important;\n                border-radius: 12px !important;\n            }\n\n            .leaflet-popup-content {\n                overflow: auto;\n            }\n\n            .loading {\n                display: none;\n                position: absolute;\n                bottom: 10px;\n                left: 50%;\n                transform: translateX(-50%);\n                padding: 8px 20px;\n                background: rgba(0,0,0,0.8);\n                color: white;\n                border-radius: 20px;\n            }\n\n            .modal {\n                display: none;\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0,0,0,0.9);\n                justify-content: center;\n                align-items: center;\n                z-index: 1000;\n            }\n\n            .modal-img {\n                max-width: 90%;\n                max-height: 90%;\n                object-fit: contain;\n                transition: opacity 0.2s;\n            }\n            .loading-modal {\n                display: none;\n                position: absolute;\n                color: white;\n                font-size: 1.5em;\n                text-shadow: 0 0 5px rgba(0,0,0,0.5);\n            }\n            .close {\n                position: absolute;\n                top: 25px;\n                right: 35px;\n                color: white;\n                font-size: 45px;\n                cursor: pointer;\n                text-shadow: 0 0 5px rgba(0,0,0,0.5);\n            }\n            .emoji-pin {\n                font-size: 24px; \n                line-height: 30px;\n            }\n            .impressum-link {\n                position: fixed;\n                bottom: 15px;\n                right: 15px;\n                z-index: 1000;\n                background: rgba(0, 0, 0, 0.7);\n                color: white;\n                padding: 8px 15px;\n                border-radius: 20px;\n                cursor: pointer;\n                font-size: 0.9em;\n                backdrop-filter: blur(2px);\n                transition: all 0.3s;\n            }\n\n            .impressum-link:hover {\n                background: rgba(0, 0, 0, 0.9);\n            }\n\n            .impressum-modal {\n                display: none;\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 25px;\n                border-radius: 10px;\n                max-width: 600px;\n                width: 90%;\n                z-index: 1001;\n                max-height: 80vh;\n                overflow-y: auto;\n            }\n\n            .impressum-modal h2 {\n                margin-top: 0;\n            }\n\n            .impressum-close {\n                position: absolute;\n                top: 10px;\n                right: 15px;\n                font-size: 24px;\n                cursor: pointer;\n            }\n        </style></head><body><div id=\"map\"></div><div class=\"modal\"><span class=\"close\">&times;</span><div class=\"loading-modal\">Loading...</div><img class=\"modal-img\" src=\"\" alt=\"Enlarged view\"></div><script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js\"></script><script>\n            const galleryStates = new Map();\n            const modal = document.querySelector('.modal');\n            const modalImg = document.querySelector('.modal-img');\n            const closeBtn = document.querySelector('.close');\n            \n            const map = L.map('map', {\n                minZoom: 2,\n                maxZoom: 6\n            }).setView([30, 0], 2);\n\n            const pinIcon = L.divIcon({\n                className: 'emoji-pin',\n                html: 'üìç', \n                iconSize: [30, 30],\n                iconAnchor: [15, 30]\n            });\n\n            //L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n            L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n                attribution: '&copy; <a href=\"https://carto.com/\">Carto</a>',\n                noWrap: true\n            }).addTo(map);\n            \n            locations().then(data => {\n                for (let key in data) {\n                    const marker = L.marker([data[key].Lat, data[key].Long], { icon: pinIcon }).addTo(map);\n                    const region = key;\n                    initGalleryState(region);\n                    const state = galleryStates.get(region);\n                    const popupContent = createPopupContent(region, state);\n\n                    marker.bindPopup(popupContent, {\n                        maxWidth: 800,        \n                        keepInView: true,            \n                        autoPanPadding: L.point(50, 50)\n                    });\n\n                    marker.on('click', async () => {\n                        marker.openPopup();\n                        if (state.offset === 0 && state.hasMore) {\n                            await loadImages(region, state, popupContent);\n                        }\n                    });\n                }\n            })\n            closeBtn.onclick = () => {\n                modal.style.display = 'none';\n            };\n\n            function initGalleryState(region) {\n                if (!galleryStates.has(region)) {\n                    galleryStates.set(region, {\n                        offset: 0,\n                        hasMore: true,\n                        loading: false\n                    });\n                }\n            }\n\n            function createPopupContent(region, state) {\n                const container = document.createElement('div');\n                container.innerHTML = `\n                    <h3 style=\"margin: 0 0 15px 10px;\">${region.toUpperCase()}</h3>\n                    <div class=\"image-gallery\"></div>\n                    <div class=\"loading\">Loading...</div>\n                `;\n                \n                const gallery = container.querySelector('.image-gallery');\n\n                gallery.onscroll = debounce(() => {\n                    const { scrollTop, scrollHeight, clientHeight } = gallery;\n                    if (scrollHeight - (scrollTop + clientHeight) < 200 && !state.loading) {\n                        loadImages(region, state, container);\n                    }\n                }, 200);\n                \n                return container;\n            }\n\n            async function locations() {\n                const response = await fetch(\n                    `/api/regions/`\n                );\n                const data = await response.json();\n                return data\n            }\n\n            async function loadImages(region, state, container) {\n                if (!state.hasMore || state.loading) return;\n                \n                state.loading = true;\n                container.querySelector('.loading').style.display = 'block';\n                \n                try {\n                    const response = await fetch(\n                        `/api/images/${region}?offset=${state.offset}`\n                    );\n                    const data = await response.json();\n                    \n                    const gallery = container.querySelector('.image-gallery');\n                    data.images.forEach(img => {\n                        const imgElement = document.createElement('img');\n                        imgElement.className = 'thumbnail';\n                        imgElement.src = `/thumbs/${region}/${img}`;\n                        imgElement.onclick = () => showImage(`/images/${region}/${img}`);\n                        gallery.appendChild(imgElement);\n                    });\n                    \n                    state.offset += data.images.length;\n                    state.hasMore = data.has_more;\n                } catch (error) {\n                    console.error('Error:', error);\n                } finally {\n                    state.loading = false;\n                    container.querySelector('.loading').style.display = 'none';\n                }\n            }\n\n            function showImage(src) {\n                const modal = document.querySelector('.modal');\n                const modalImg = document.querySelector('.modal-img');\n                const loading = document.querySelector('.loading-modal');\n\n                modalImg.style.opacity = '0';\n                loading.style.display = 'block';\n                modal.style.display = 'flex';\n\n                const newImg = new Image();\n                newImg.src = src;\n                \n                newImg.onload = () => {\n                    modalImg.src = src;\n                    loading.style.display = 'none';\n                    modalImg.style.opacity = '1';\n                };\n                \n                newImg.onerror = () => {\n                    loading.style.display = 'none';\n                    modal.style.display = 'none';\n                    console.error('Failed to load image:', src);\n                };\n            }\n\n        \n            window.onclick = (event) => {\n                if (event.target === modal) {\n                    modal.style.display = 'none';\n                }\n            };\n\n            function debounce(fn, delay) {\n                let timeout;\n                return (...args) => {\n                    clearTimeout(timeout);\n                    timeout = setTimeout(() => fn(...args), delay);\n                };\n            }\n            function showImpressum() {\n                document.getElementById('impressumModal').style.display = 'block';\n            }\n            function showPrivacy() {\n                document.getElementById('privacyModal').style.display = 'block';\n            }\n\n            function hideImpressum() {\n                document.getElementById('impressumModal').style.display = 'none';\n            }\n            function hidePrivacy() {\n                document.getElementById('privacyModal').style.display = 'none';\n            }\n\n            window.onclick = function(event) {\n                const modal = document.getElementById('impressumModal');\n                if (event.target === modal) {\n                    modal.style.display = 'none';\n                }\n            }\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
